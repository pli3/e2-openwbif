#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from urllib import quote
from Plugins.Extensions.OpenWebif.local import tstrings

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1447321436.368452
__CHEETAH_genTimestamp__ = 'Thu Nov 12 18:43:56 2015'
__CHEETAH_src__ = '/home/knuth/openpli-oe-core/build/tmp/work/fusionhd-oe-linux/enigma2-plugin-extensions-openwebif/1+gitAUTOINC+5837c87afc-r0/git/plugin/controllers/views/mobile/index.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Nov 12 18:43:41 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class index(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(index, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''<html>\r
 <head>\r
\t<title>OpenWebif</title>\r
\t<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />\r
\t<meta name="viewport" content="user-scalable=no, width=device-width"/>\r
\t<meta name="apple-mobile-web-app-capable" content="yes" />\r
\t<link rel="stylesheet" type="text/css" href="/css/jquery.mobile-1.0.min.css" media="screen"/>\r
\t<link rel="stylesheet" type="text/css" href="/css/iphone.css" media="screen"/>\r
\t<script src="/js/jquery-1.6.2.min.js"></script>\r
\t<script src="/js/jquery.mobile-1.0.min.js"></script>\r
 </head>\r
 <body> \r
\r
\t<div data-role="page">\r
\r
\t\t<div id="header">\r
\t\t\t<h1>OpenWebif</h1>\r
\t\t</div>\r
\r
\t\t<div id="contentContainer">\r
\t\t\t<ul data-role="listview" data-inset="true" data-theme="d">\r
\t\t\t\t<li data-role="list-divider" role="heading" data-theme="b">Index</li>\r
\t\t\t\t<li><a href="/mobile/control">''')
        _v = VFFSL(SL,"tstrings",True)['control'] # u"$tstrings['control']" on line 25, col 35
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['control']")) # from line 25, col 35.
        write(u'''</a></li>\r
\t\t\t\t<li><a href="/mobile/bouquets">''')
        _v = VFFSL(SL,"tstrings",True)['bouquets'] # u"$tstrings['bouquets']" on line 26, col 36
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['bouquets']")) # from line 26, col 36.
        write(u''' (''')
        _v = VFFSL(SL,"tstrings",True)['tv'] # u"$tstrings['tv']" on line 26, col 59
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['tv']")) # from line 26, col 59.
        write(u''')</a></li>\r
\t\t\t\t<li><a href="/mobile/bouquets?stype=radio">''')
        _v = VFFSL(SL,"tstrings",True)['bouquets'] # u"$tstrings['bouquets']" on line 27, col 48
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['bouquets']")) # from line 27, col 48.
        write(u''' (''')
        _v = VFFSL(SL,"tstrings",True)['radio'] # u"$tstrings['radio']" on line 27, col 71
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['radio']")) # from line 27, col 71.
        write(u''')</a></li>\r
\t\t\t\t<li><a href="/mobile/timerlist">''')
        _v = VFFSL(SL,"tstrings",True)['timer_list'] # u"$tstrings['timer_list']" on line 28, col 37
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['timer_list']")) # from line 28, col 37.
        write(u'''</a></li>\r
\t\t\t\t<li><a href="/mobile/screenshot">''')
        _v = VFFSL(SL,"tstrings",True)['screenshot'] # u"$tstrings['screenshot']" on line 29, col 38
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['screenshot']")) # from line 29, col 38.
        write(u'''</a></li>\r
\t\t\t\t<li><a href="/mobile/movies">''')
        _v = VFFSL(SL,"tstrings",True)['movies'] # u"$tstrings['movies']" on line 30, col 34
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['movies']")) # from line 30, col 34.
        write(u'''</a></a></li>\r
\t\t\t\t<li><a href="/mobile/satfinder">''')
        _v = VFFSL(SL,"tstrings",True)['satfinder'] # u"$tstrings['satfinder']" on line 31, col 37
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['satfinder']")) # from line 31, col 37.
        write(u'''</a></a></li>\r
\t\t\t\t<li><a href="/mobile/about">''')
        _v = VFFSL(SL,"tstrings",True)['about'] # u"$tstrings['about']" on line 32, col 33
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['about']")) # from line 32, col 33.
        write(u'''</a></li>\r
\t\t\t</ul>\r
\t\t</div>\r
\r
\t\t<div id="footer">\r
\t\t\t<p>OpenWebif Mobile</p>\r
\t\t\t<a onclick="document.location.href=\'/index?mode=fullpage\';return false;" href="#">''')
        _v = VFFSL(SL,"tstrings",True)['show_full_openwebif'] # u"$tstrings['show_full_openwebif']" on line 38, col 86
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['show_full_openwebif']")) # from line 38, col 86.
        write(u'''</a>\r
\t\t</div>\r
\t\t\r
\t</div>\r
 </body>\r
</html>\r
      ''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_index= 'respond'

## END CLASS DEFINITION

if not hasattr(index, '_initCheetahAttributes'):
    templateAPIClass = getattr(index, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(index)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=index()).run()


