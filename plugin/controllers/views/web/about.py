#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1447321436.241699
__CHEETAH_genTimestamp__ = 'Thu Nov 12 18:43:56 2015'
__CHEETAH_src__ = '/home/knuth/openpli-oe-core/build/tmp/work/fusionhd-oe-linux/enigma2-plugin-extensions-openwebif/1+gitAUTOINC+5837c87afc-r0/git/plugin/controllers/views/web/about.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Nov 12 18:43:41 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class about(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(about, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        _orig_filter_60429695 = _filter
        filterName = u'WebSafe'
        if self._CHEETAH__filters.has_key("WebSafe"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        write(u'''<?xml version="1.0" encoding="UTF-8"?>
<e2abouts>
\t<e2about>
\t\t<e2oeversion>''')
        _v = VFFSL(SL,"info.oever",True) # u'$info.oever' on line 5, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'$info.oever')) # from line 5, col 16.
        write(u'''</e2oeversion>
\t\t<e2enigmaversion>''')
        _v = VFFSL(SL,"info.enigmaver",True) # u'$info.enigmaver' on line 6, col 20
        if _v is not None: write(_filter(_v, rawExpr=u'$info.enigmaver')) # from line 6, col 20.
        write(u'''</e2enigmaversion>
\t\t<e2distroversion>''')
        _v = VFFSL(SL,"info.imagedistro",True) # u'$info.imagedistro' on line 7, col 20
        if _v is not None: write(_filter(_v, rawExpr=u'$info.imagedistro')) # from line 7, col 20.
        write(u'''</e2distroversion>
\t\t<e2imageversion>''')
        _v = VFFSL(SL,"info.imagever",True) # u'$info.imagever' on line 8, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'$info.imagever')) # from line 8, col 19.
        write(u'''</e2imageversion>
\t\t<e2driverdate>''')
        _v = VFFSL(SL,"info.driverdate",True) # u'$info.driverdate' on line 9, col 17
        if _v is not None: write(_filter(_v, rawExpr=u'$info.driverdate')) # from line 9, col 17.
        write(u'''</e2driverdate>
\t\t<e2webifversion>''')
        _v = VFFSL(SL,"info.webifver",True) # u'$info.webifver' on line 10, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'$info.webifver')) # from line 10, col 19.
        write(u'''</e2webifversion>
\t\t<e2fpversion>''')
        _v = VFFSL(SL,"str",False)(VFFSL(SL,"info.fp_version",True)) # u'$str($info.fp_version)' on line 11, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'$str($info.fp_version)')) # from line 11, col 16.
        write(u'''</e2fpversion>
\t\t<e2model>''')
        _v = VFFSL(SL,"info.model",True) # u'$info.model' on line 12, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'$info.model')) # from line 12, col 12.
        write(u'''</e2model>
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"info.ifaces",True)) > 0: # generated from line 13, col 3
            write(u'''\t\t<e2lanmac>''')
            _v = VFN(VFN(VFFSL(SL,"info",True),"ifaces",True)[0],"mac",True) # u'$info.ifaces[0].mac' on line 14, col 13
            if _v is not None: write(_filter(_v, rawExpr=u'$info.ifaces[0].mac')) # from line 14, col 13.
            write(u'''</e2lanmac>
\t\t<e2landhcp>''')
            _v = VFN(VFN(VFFSL(SL,"info",True),"ifaces",True)[0],"dhcp",True) # u'$info.ifaces[0].dhcp' on line 15, col 14
            if _v is not None: write(_filter(_v, rawExpr=u'$info.ifaces[0].dhcp')) # from line 15, col 14.
            write(u'''</e2landhcp>
\t\t<e2lanip>''')
            _v = VFN(VFN(VFFSL(SL,"info",True),"ifaces",True)[0],"ip",True) # u'$info.ifaces[0].ip' on line 16, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'$info.ifaces[0].ip')) # from line 16, col 12.
            write(u'''</e2lanip>
\t\t<e2lanmask>''')
            _v = VFN(VFN(VFFSL(SL,"info",True),"ifaces",True)[0],"mask",True) # u'$info.ifaces[0].mask' on line 17, col 14
            if _v is not None: write(_filter(_v, rawExpr=u'$info.ifaces[0].mask')) # from line 17, col 14.
            write(u'''</e2lanmask>
\t\t<e2langw>''')
            _v = VFN(VFN(VFFSL(SL,"info",True),"ifaces",True)[0],"gw",True) # u'$info.ifaces[0].gw' on line 18, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'$info.ifaces[0].gw')) # from line 18, col 12.
            write(u'''</e2langw>
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"info.hdd",True)) > 0: # generated from line 20, col 3
            write(u'''\t\t<e2hddinfo>
\t\t\t<model>''')
            _v = VFN(VFN(VFFSL(SL,"info",True),"hdd",True)[0],"model",True) # u'$info.hdd[0].model' on line 22, col 11
            if _v is not None: write(_filter(_v, rawExpr=u'$info.hdd[0].model')) # from line 22, col 11.
            write(u'''</model>
\t\t\t<capacity>''')
            _v = VFN(VFN(VFFSL(SL,"info",True),"hdd",True)[0],"capacity",True) # u'$info.hdd[0].capacity' on line 23, col 14
            if _v is not None: write(_filter(_v, rawExpr=u'$info.hdd[0].capacity')) # from line 23, col 14.
            write(u'''</capacity>
\t\t\t<free>''')
            _v = VFN(VFN(VFFSL(SL,"info",True),"hdd",True)[0],"free",True) # u'$info.hdd[0].free' on line 24, col 10
            if _v is not None: write(_filter(_v, rawExpr=u'$info.hdd[0].free')) # from line 24, col 10.
            write(u'''</free>
\t\t</e2hddinfo>
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"info.tuners",True)) > 0: # generated from line 27, col 3
            write(u'''\t\t<e2tunerinfo>
''')
            for tuner in VFFSL(SL,"info.tuners",True): # generated from line 29, col 4
                write(u'''\t\t\t<e2nim>
\t\t\t\t<name>''')
                _v = VFFSL(SL,"tuner.name",True) # u'$tuner.name' on line 31, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'$tuner.name')) # from line 31, col 11.
                write(u'''</name>
\t\t\t\t<type>''')
                _v = VFFSL(SL,"tuner.type",True) # u'$tuner.type' on line 32, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'$tuner.type')) # from line 32, col 11.
                write(u'''</type>
\t\t\t</e2nim>
''')
            write(u'''\t\t</e2tunerinfo>\t\t
''')
        write(u'''\t\t<e2servicename>''')
        _v = VFFSL(SL,"service.name",True) # u'$service.name' on line 37, col 18
        if _v is not None: write(_filter(_v, rawExpr=u'$service.name')) # from line 37, col 18.
        write(u'''</e2servicename>
\t\t<e2servicenamespace>''')
        _v = VFFSL(SL,"service.namespace",True) # u'$service.namespace' on line 38, col 23
        if _v is not None: write(_filter(_v, rawExpr=u'$service.namespace')) # from line 38, col 23.
        write(u'''</e2servicenamespace>
\t\t<e2serviceaspect>''')
        _v = VFFSL(SL,"service.aspect",True) # u'$service.aspect' on line 39, col 20
        if _v is not None: write(_filter(_v, rawExpr=u'$service.aspect')) # from line 39, col 20.
        write(u'''</e2serviceaspect>
\t\t<e2serviceprovider>''')
        _v = VFFSL(SL,"service.provider",True) # u'$service.provider' on line 40, col 22
        if _v is not None: write(_filter(_v, rawExpr=u'$service.provider')) # from line 40, col 22.
        write(u'''</e2serviceprovider>
\t\t<e2videowidth>''')
        _v = VFFSL(SL,"service.width",True) # u'$service.width' on line 41, col 17
        if _v is not None: write(_filter(_v, rawExpr=u'$service.width')) # from line 41, col 17.
        write(u'''</e2videowidth>
\t\t<e2videoheight>''')
        _v = VFFSL(SL,"service.height",True) # u'$service.height' on line 42, col 18
        if _v is not None: write(_filter(_v, rawExpr=u'$service.height')) # from line 42, col 18.
        write(u'''</e2videoheight>
\t\t<e2servicevideosize>''')
        _v = VFFSL(SL,"service.width",True) # u'${service.width}' on line 43, col 23
        if _v is not None: write(_filter(_v, rawExpr=u'${service.width}')) # from line 43, col 23.
        write(u'''x''')
        _v = VFFSL(SL,"service.height",True) # u'${service.height}' on line 43, col 40
        if _v is not None: write(_filter(_v, rawExpr=u'${service.height}')) # from line 43, col 40.
        write(u'''</e2servicevideosize>
\t\t<e2apid>''')
        _v = VFFSL(SL,"service.apid",True) # u'$service.apid' on line 44, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$service.apid')) # from line 44, col 11.
        write(u'''</e2apid>
\t\t<e2vpid>''')
        _v = VFFSL(SL,"service.vpid",True) # u'$service.vpid' on line 45, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$service.vpid')) # from line 45, col 11.
        write(u'''</e2vpid>
\t\t<e2pcrpid>''')
        _v = VFFSL(SL,"service.pcrpid",True) # u'$service.pcrpid' on line 46, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'$service.pcrpid')) # from line 46, col 13.
        write(u'''</e2pcrpid>
\t\t<e2pmtpid>''')
        _v = VFFSL(SL,"service.pmtpid",True) # u'$service.pmtpid' on line 47, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'$service.pmtpid')) # from line 47, col 13.
        write(u'''</e2pmtpid>
\t\t<e2txtpid>''')
        _v = VFFSL(SL,"service.txtpid",True) # u'$service.txtpid' on line 48, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'$service.txtpid')) # from line 48, col 13.
        write(u'''</e2txtpid>
\t\t<e2tsid>''')
        _v = VFFSL(SL,"service.tsid",True) # u'$service.tsid' on line 49, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$service.tsid')) # from line 49, col 11.
        write(u'''</e2tsid>
\t\t<e2onid>''')
        _v = VFFSL(SL,"service.onid",True) # u'$service.onid' on line 50, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$service.onid')) # from line 50, col 11.
        write(u'''</e2onid>
\t\t<e2sid>''')
        _v = VFFSL(SL,"service.sid",True) # u'$service.sid' on line 51, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'$service.sid')) # from line 51, col 10.
        write(u'''</e2sid>
\t</e2about>
</e2abouts>
''')
        _filter = self._CHEETAH__currentFilter = _orig_filter_60429695
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_about= 'respond'

## END CLASS DEFINITION

if not hasattr(about, '_initCheetahAttributes'):
    templateAPIClass = getattr(about, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(about)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=about()).run()


