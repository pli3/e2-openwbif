#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1447321436.120446
__CHEETAH_genTimestamp__ = 'Thu Nov 12 18:43:56 2015'
__CHEETAH_src__ = '/home/knuth/openpli-oe-core/build/tmp/work/fusionhd-oe-linux/enigma2-plugin-extensions-openwebif/1+gitAUTOINC+5837c87afc-r0/git/plugin/controllers/views/web/timerlist.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Nov 12 18:43:41 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class timerlist(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(timerlist, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        _orig_filter_11140920 = _filter
        filterName = u'WebSafe'
        if self._CHEETAH__filters.has_key("WebSafe"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        write(u'''<?xml version="1.0" encoding="UTF-8"?>
<e2timerlist>
''')
        for timer in VFFSL(SL,"timers",True): # generated from line 4, col 2
            write(u'''\t<e2timer>
\t\t<e2servicereference>''')
            _v = VFFSL(SL,"timer.serviceref",True) # u'$timer.serviceref' on line 6, col 23
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.serviceref')) # from line 6, col 23.
            write(u'''</e2servicereference>
\t\t<e2servicename>''')
            _v = VFFSL(SL,"timer.servicename",True) # u'$timer.servicename' on line 7, col 18
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.servicename')) # from line 7, col 18.
            write(u'''</e2servicename>
\t\t<e2eit>''')
            _v = VFFSL(SL,"timer.eit",True) # u'$timer.eit' on line 8, col 10
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.eit')) # from line 8, col 10.
            write(u'''</e2eit>
\t\t<e2name>''')
            _v = VFFSL(SL,"timer.name",True) # u'$timer.name' on line 9, col 11
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.name')) # from line 9, col 11.
            write(u'''</e2name>
\t\t<e2description>''')
            _v = VFFSL(SL,"timer.description",True) # u'$timer.description' on line 10, col 18
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.description')) # from line 10, col 18.
            write(u'''</e2description>
\t\t<e2descriptionextended>''')
            _v = VFFSL(SL,"timer.descriptionextended",True) # u'$timer.descriptionextended' on line 11, col 26
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.descriptionextended')) # from line 11, col 26.
            write(u'''</e2descriptionextended>
\t\t<e2disabled>''')
            _v = VFFSL(SL,"timer.disabled",True) # u'$timer.disabled' on line 12, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.disabled')) # from line 12, col 15.
            write(u'''</e2disabled>
\t\t<e2timebegin>''')
            _v = VFFSL(SL,"timer.begin",True) # u'$timer.begin' on line 13, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.begin')) # from line 13, col 16.
            write(u'''</e2timebegin>
\t\t<e2timeend>''')
            _v = VFFSL(SL,"timer.end",True) # u'$timer.end' on line 14, col 14
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.end')) # from line 14, col 14.
            write(u'''</e2timeend>
\t\t<e2duration>''')
            _v = VFFSL(SL,"timer.duration",True) # u'$timer.duration' on line 15, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.duration')) # from line 15, col 15.
            write(u'''</e2duration>
\t\t<e2startprepare>''')
            _v = VFFSL(SL,"timer.startprepare",True) # u'$timer.startprepare' on line 16, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.startprepare')) # from line 16, col 19.
            write(u'''</e2startprepare>
\t\t<e2justplay>''')
            _v = VFFSL(SL,"timer.justplay",True) # u'$timer.justplay' on line 17, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.justplay')) # from line 17, col 15.
            write(u'''</e2justplay>
\t\t<e2afterevent>''')
            _v = VFFSL(SL,"timer.afterevent",True) # u'$timer.afterevent' on line 18, col 17
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.afterevent')) # from line 18, col 17.
            write(u'''</e2afterevent>
\t\t<e2location>''')
            _v = VFFSL(SL,"timer.dirname",True) # u'$timer.dirname' on line 19, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.dirname')) # from line 19, col 15.
            write(u'''</e2location>
\t\t<e2tags>''')
            _v = VFFSL(SL,"timer.tags",True) # u'$timer.tags' on line 20, col 11
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.tags')) # from line 20, col 11.
            write(u'''</e2tags>
\t\t<e2logentries>''')
            _v = VFFSL(SL,"timer.logentries",True) # u'$timer.logentries' on line 21, col 17
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.logentries')) # from line 21, col 17.
            write(u'''</e2logentries>
\t\t<e2filename>''')
            _v = VFFSL(SL,"timer.filename",True) # u'$timer.filename' on line 22, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.filename')) # from line 22, col 15.
            write(u'''</e2filename>
\t\t<e2backoff>''')
            _v = VFFSL(SL,"timer.backoff",True) # u'$timer.backoff' on line 23, col 14
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.backoff')) # from line 23, col 14.
            write(u'''</e2backoff>
\t\t<e2nextactivation>''')
            _v = VFFSL(SL,"timer.nextactivation",True) # u'$timer.nextactivation' on line 24, col 21
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.nextactivation')) # from line 24, col 21.
            write(u'''</e2nextactivation>
\t\t<e2firsttryprepare>''')
            _v = VFFSL(SL,"timer.firsttryprepare",True) # u'$timer.firsttryprepare' on line 25, col 22
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.firsttryprepare')) # from line 25, col 22.
            write(u'''</e2firsttryprepare>
\t\t<e2state>''')
            _v = VFFSL(SL,"timer.state",True) # u'$timer.state' on line 26, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.state')) # from line 26, col 12.
            write(u'''</e2state>
\t\t<e2repeated>''')
            _v = VFFSL(SL,"timer.repeated",True) # u'$timer.repeated' on line 27, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.repeated')) # from line 27, col 15.
            write(u'''</e2repeated>
\t\t<e2dontsave>''')
            _v = VFFSL(SL,"timer.dontsave",True) # u'$timer.dontsave' on line 28, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.dontsave')) # from line 28, col 15.
            write(u'''</e2dontsave>
\t\t<e2cancled>''')
            _v = VFFSL(SL,"timer.cancelled",True) # u'$timer.cancelled' on line 29, col 14
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.cancelled')) # from line 29, col 14.
            write(u'''</e2cancled>
\t\t<e2toggledisabled>''')
            _v = VFFSL(SL,"timer.toggledisabled",True) # u'$timer.toggledisabled' on line 30, col 21
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.toggledisabled')) # from line 30, col 21.
            write(u'''</e2toggledisabled>
\t\t<e2toggledisabledimg>''')
            _v = VFFSL(SL,"timer.toggledisabledimg",True) # u'$timer.toggledisabledimg' on line 31, col 24
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.toggledisabledimg')) # from line 31, col 24.
            write(u'''</e2toggledisabledimg>
\t\t<e2alwayszap>''')
            _v = VFFSL(SL,"timer.always_zap",True) # u'$timer.always_zap' on line 32, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$timer.always_zap')) # from line 32, col 16.
            write(u'''</e2alwayszap>
\t</e2timer>
''')
        write(u'''</e2timerlist>
''')
        _filter = self._CHEETAH__currentFilter = _orig_filter_11140920
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_timerlist= 'respond'

## END CLASS DEFINITION

if not hasattr(timerlist, '_initCheetahAttributes'):
    templateAPIClass = getattr(timerlist, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(timerlist)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=timerlist()).run()


