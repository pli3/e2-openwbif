#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from urllib import quote
from Plugins.Extensions.OpenWebif.local import tstrings

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1447321436.713762
__CHEETAH_genTimestamp__ = 'Thu Nov 12 18:43:56 2015'
__CHEETAH_src__ = '/home/knuth/openpli-oe-core/build/tmp/work/fusionhd-oe-linux/enigma2-plugin-extensions-openwebif/1+gitAUTOINC+5837c87afc-r0/git/plugin/controllers/views/ajax/movies.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Nov 12 18:43:41 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class movies(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(movies, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''<div id="content_main" style="min-height: 500px;">\r
\t<div id="tvcontentmain">\r
\t\t<div id="toolbar-header">\r
\t\t\t<span id="toolbar">\r
''')
        path = ''
        write(u'''\t\t<span id="moviebuttons">\r
\t\t\t<button onclick="load_maincontent_spin(\'ajax/movies?dirname=/\'); return false">''')
        _v = VFFSL(SL,"tstrings",True)['Root'] # u"$tstrings['Root']" on line 9, col 83
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['Root']")) # from line 9, col 83.
        write(u'''</button>\r
''')
        for dir in VFN(VFFSL(SL,"directory",True)[0:-1],"split",False)("/")[1:-1]: # generated from line 10, col 4
            path += '/' + VFFSL(SL,"dir",True)
            write(u'''\t\t\t\t<button onclick="load_maincontent_spin(\'ajax/movies?dirname=\'+escape(\'''')
            _v = VFFSL(SL,"path",True) # u'$path' on line 12, col 75
            if _v is not None: write(_filter(_v, rawExpr=u'$path')) # from line 12, col 75.
            write(u'''\'));">''')
            _v = VFFSL(SL,"dir",True) # u'$dir' on line 12, col 86
            if _v is not None: write(_filter(_v, rawExpr=u'$dir')) # from line 12, col 86.
            write(u'''</button>\r
''')
        if VFFSL(SL,"directory",True) != '/': # generated from line 14, col 4
            write(u'''\t\t\t\t<button><span style="color: red; font-weight: bold;">\r
''')
            _v = VFN(VFFSL(SL,"directory",True)[0:-1],"split",False)("/")[-1]
            if _v is not None: write(_filter(_v))
            write(u'''\t\t\t\t</span></button>\r
''')
        write(u'''\t\t</span>\r
\r
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"bookmarks",True)): # generated from line 21, col 3
            write(u'''\t\t\t<select name="directory" onChange="load_maincontent_spin(\'ajax/movies?dirname=\'+escape(options[selectedIndex].value)); return false;">\r
\t\t\t<option>Subdirs:</option>\r
''')
            for bookmark in VFFSL(SL,"bookmarks",True): # generated from line 24, col 4
                write(u'''\t\t\t\t<option value="''')
                _v = VFFSL(SL,"directory",True) # u'$directory' on line 25, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$directory')) # from line 25, col 20.
                _v = VFFSL(SL,"bookmark",True) # u'$bookmark' on line 25, col 30
                if _v is not None: write(_filter(_v, rawExpr=u'$bookmark')) # from line 25, col 30.
                write(u'''">''')
                _v = VFFSL(SL,"bookmark",True) # u'$bookmark' on line 25, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'$bookmark')) # from line 25, col 41.
                write(u'''</option>\r
''')
            write(u'''\t\t\t</select>\r
''')
        write(u'''\t\t</span>\r
\t\t</div>\r
\r
\t\t<div id="movies">\r
''')
        count = 0
        for movie in VFFSL(SL,"movies",True): # generated from line 34, col 3
            write(u'''\t\t\t<div class="tm_row" id="''')
            _v = VFFSL(SL,"count",True) # u'$count' on line 35, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$count')) # from line 35, col 28.
            write(u'''">\r
\t\t\t\t<div class="tm_text">\r
\t\t\t\t\t<div class="tm_buttons">\r
\t\t\t\t\t\t<div>\r
\t\t\t\t\t\t<a href=\'#\' onClick="playRecording(\'''')
            _v = VFFSL(SL,"quote",False)(VFFSL(SL,"movie.serviceref",True)) # u'$quote($movie.serviceref)' on line 39, col 43
            if _v is not None: write(_filter(_v, rawExpr=u'$quote($movie.serviceref)')) # from line 39, col 43.
            write(u'''\');" title="''')
            _v = VFFSL(SL,"tstrings",True)['playback'] # u"$tstrings['playback']" on line 39, col 80
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['playback']")) # from line 39, col 80.
            write(u'''"><div class="ow_i ow_i_play"></div></a>\r
''')
            if VFFSL(SL,"transcoding",True): # generated from line 40, col 7
                write(u'''\t\t\t\t\t\t<a href="#" onclick="jumper80(\'''')
                _v = VFFSL(SL,"quote",False)(VFFSL(SL,"movie.filename",True)) # u'$quote($movie.filename)' on line 41, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'$quote($movie.filename)')) # from line 41, col 38.
                write(u'''\');" title="''')
                _v = VFFSL(SL,"tstrings",True)['stream'] # u"$tstrings['stream']" on line 41, col 73
                if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['stream']")) # from line 41, col 73.
                write(u''': ''')
                _v = VFFSL(SL,"movie.eventname",True) # u'$movie.eventname' on line 41, col 94
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.eventname')) # from line 41, col 94.
                write(u'''"><div class="ow_i ow_i_stream1"></div></a>\r
\t\t\t\t\t\t<a href="#" onclick="jumper8003(\'''')
                _v = VFFSL(SL,"quote",False)(VFFSL(SL,"movie.filename",True)) # u'$quote($movie.filename)' on line 42, col 40
                if _v is not None: write(_filter(_v, rawExpr=u'$quote($movie.filename)')) # from line 42, col 40.
                write(u'''\');" title="''')
                _v = VFFSL(SL,"tstrings",True)['stream'] # u"$tstrings['stream']" on line 42, col 75
                if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['stream']")) # from line 42, col 75.
                write(u''' (''')
                _v = VFFSL(SL,"tstrings",True)['transcoded'] # u"$tstrings['transcoded']" on line 42, col 96
                if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['transcoded']")) # from line 42, col 96.
                write(u'''): ''')
                _v = VFFSL(SL,"movie.eventname",True) # u'$movie.eventname' on line 42, col 122
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.eventname')) # from line 42, col 122.
                write(u'''"><div class="ow_i ow_i_stream2"></div></a>\r
''')
            else: # generated from line 43, col 7
                write(u'''\t\t\t\t\t\t<a target="_blank" href=\'web/ts.m3u?file=''')
                _v = VFFSL(SL,"quote",False)(VFFSL(SL,"movie.filename",True)) # u'$quote($movie.filename)' on line 44, col 48
                if _v is not None: write(_filter(_v, rawExpr=u'$quote($movie.filename)')) # from line 44, col 48.
                write(u'''\' title="''')
                _v = VFFSL(SL,"tstrings",True)['stream'] # u"$tstrings['stream']" on line 44, col 80
                if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['stream']")) # from line 44, col 80.
                write(u''' ''')
                _v = VFFSL(SL,"movie.eventname",True) # u'$movie.eventname' on line 44, col 100
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.eventname')) # from line 44, col 100.
                write(u'''"><div class="ow_i ow_i_stream1"></div></a>\r
''')
            write(u'''\t\t\t\t\t\t<br><br>\r
''')
            w = VFFSL(SL,"movie.lastseen",True)
            if VFFSL(SL,"w",True) > 0: # generated from line 48, col 7
                w = VFFSL(SL,"w",True) * 70 / 100
                size = str(VFFSL(SL,"w",True)) + 'px'
                write(u'''\t\t\t\t\t\t\t<div class="mlp"><div class="mlpp" style="width:''')
                _v = VFFSL(SL,"size",True) # u'$size' on line 51, col 56
                if _v is not None: write(_filter(_v, rawExpr=u'$size')) # from line 51, col 56.
                write(u'''">\r
\t\t\t\t\t\t\t</div></div>\r
''')
            write(u'''\t\t\t\t\t\t<br>\r
''')
            eventname_escaped = VFN(VFFSL(SL,"movie.eventname",True),"replace",False)("'", r"\'")
            write(u"""\t\t\t\t\t\t<a href='/file?action=download&file=""")
            _v = VFFSL(SL,"quote",False)(VFFSL(SL,"movie.filename",True)) # u'$quote($movie.filename)' on line 56, col 43
            if _v is not None: write(_filter(_v, rawExpr=u'$quote($movie.filename)')) # from line 56, col 43.
            write(u'''\' title="''')
            _v = VFFSL(SL,"tstrings",True)['download'] # u"$tstrings['download']" on line 56, col 75
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['download']")) # from line 56, col 75.
            write(u''' ''')
            _v = VFFSL(SL,"movie.eventname",True) # u'$movie.eventname' on line 56, col 97
            if _v is not None: write(_filter(_v, rawExpr=u'$movie.eventname')) # from line 56, col 97.
            write(u'''"><div class="ow_i ow_i_save"></div></a>\r
\t\t\t\t\t\t<a href=\'#\' onClick="renameMovie(\'''')
            _v = VFFSL(SL,"quote",False)(VFFSL(SL,"movie.serviceref",True)) # u'$quote($movie.serviceref)' on line 57, col 41
            if _v is not None: write(_filter(_v, rawExpr=u'$quote($movie.serviceref)')) # from line 57, col 41.
            write(u"""','""")
            _v = VFFSL(SL,"eventname_escaped",True) # u'$eventname_escaped' on line 57, col 69
            if _v is not None: write(_filter(_v, rawExpr=u'$eventname_escaped')) # from line 57, col 69.
            write(u'''\');" title="''')
            _v = VFFSL(SL,"tstrings",True)['rename_recording'] # u"$tstrings['rename_recording']" on line 57, col 99
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['rename_recording']")) # from line 57, col 99.
            write(u'''"><div class="ow_i ow_i_edit"></div></a>\r
\t\t\t\t\t\t<a href=\'#\' onClick="deleteMovie(\'''')
            _v = VFFSL(SL,"quote",False)(VFFSL(SL,"movie.serviceref",True)) # u'$quote($movie.serviceref)' on line 58, col 41
            if _v is not None: write(_filter(_v, rawExpr=u'$quote($movie.serviceref)')) # from line 58, col 41.
            write(u"""', '""")
            _v = VFFSL(SL,"count",True) # u'$count' on line 58, col 70
            if _v is not None: write(_filter(_v, rawExpr=u'$count')) # from line 58, col 70.
            write(u"""', '""")
            _v = VFFSL(SL,"eventname_escaped",True) # u'$eventname_escaped' on line 58, col 80
            if _v is not None: write(_filter(_v, rawExpr=u'$eventname_escaped')) # from line 58, col 80.
            write(u'''\'); return false;" title="''')
            _v = VFFSL(SL,"tstrings",True)['delete_recording'] # u"$tstrings['delete_recording']" on line 58, col 124
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['delete_recording']")) # from line 58, col 124.
            write(u'''"><div class="ow_i ow_i_delete"></div></a>\r
\r
\t\t\t\t\t\t</div>\r
\t\t\t\t\t\t</div>\r
''')
            if VFFSL(SL,"movie.eventname",True) != "": # generated from line 62, col 6
                write(u'''\t\t\t\t\t\t<div>\r
\t\t\t\t\t\t\t<span style="color: #176093; font-weight: bold;">''')
                _v = VFFSL(SL,"movie.eventname",True) # u'$movie.eventname' on line 64, col 57
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.eventname')) # from line 64, col 57.
                write(u'''</span><br /> ''')
                _v = VFFSL(SL,"movie.servicename",True) # u'$movie.servicename' on line 64, col 87
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.servicename')) # from line 64, col 87.
                write(u'''  ''')
                _v = VFFSL(SL,"movie.begintime",True) # u'$movie.begintime' on line 64, col 107
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.begintime')) # from line 64, col 107.
                write(u'''<br /> ''')
                _v = VFFSL(SL,"movie.length",True) # u'$movie.length' on line 64, col 130
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.length')) # from line 64, col 130.
                write(u''' min.\r
\t\t\t\t\t\t</div>\r
\t\t\t\t\t\t<div>\r
\t\t\t\t\t\t\t<span style="color: #7F8181; font-weight: bold;">''')
                _v = VFFSL(SL,"movie.description",True) # u'$movie.description' on line 67, col 57
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.description')) # from line 67, col 57.
                write(u'''</span>\r
\t\t\t\t\t\t</div>\r
\t\t\t\t\t\t<div>\r
\t\t\t\t\t\t\t<span style="color: #7F8181;">''')
                _v = VFFSL(SL,"movie.descriptionExtended",True) # u'$movie.descriptionExtended' on line 70, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.descriptionExtended')) # from line 70, col 38.
                write(u'''</span>\r
\t\t\t\t\t\t</div>\r
''')
            else: # generated from line 72, col 6
                write(u'''\t\t\t\t\t\t<div>\r
\t\t\t\t\t\t\t<span style="color: #176093; font-weight: bold;">''')
                _v = VFFSL(SL,"movie.filename",True) # u'$movie.filename' on line 74, col 57
                if _v is not None: write(_filter(_v, rawExpr=u'$movie.filename')) # from line 74, col 57.
                write(u'''</span>\r
\t\t\t\t\t\t</div>\r
''')
            write(u'''\t\t\t\t</div>\r
\t\t\t\t<div style="clear: both;"></div>\r
''')
            count += 1
            write(u'''\t\t\t</div>\r
''')
        write(u'''\t\t</div>\r
\t</div>\r
</div>\r
\r
<script type="text/javascript">\r
$(\'#moviebuttons\').buttonset();\r
</script>\r
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_movies= 'respond'

## END CLASS DEFINITION

if not hasattr(movies, '_initCheetahAttributes'):
    templateAPIClass = getattr(movies, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(movies)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=movies()).run()


