#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from urllib import quote
from json import dumps
from Plugins.Extensions.OpenWebif.local import tstrings

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1447321436.636969
__CHEETAH_genTimestamp__ = 'Thu Nov 12 18:43:56 2015'
__CHEETAH_src__ = '/home/knuth/openpli-oe-core/build/tmp/work/fusionhd-oe-linux/enigma2-plugin-extensions-openwebif/1+gitAUTOINC+5837c87afc-r0/git/plugin/controllers/views/ajax/event.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Nov 12 18:43:41 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class event(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(event, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        etime = time.localtime(VFFSL(SL,"event.begin",True))
        channel = VFN(VFFSL(SL,"event.channel",True),"replace",False)("'", r"\'")
        title = VFN(VFFSL(SL,"event.title",True),"replace",False)("'", r"\'")
        sref = quote(VFFSL(SL,"event.sref",True), safe=' ~@#$&()*!+=:;,.?/\'')
        write(u'''
<style>
table { font-size:12px; font-family: Verdana,Arial,sans-serif;}
tr {background-color: #F0F7FC;}

.ti_icon {
margin:5px 2px 0px 0px;
height:25px;
width:25px;
background-image:url(\'../images/timer_icons.png\');
display:inline-block;
}
.ti_empty {background-position:0px 0px;}
.ti_timer {background-position:-25px 0px;}
.ti_timerplay {background-position:-50px 0px;}
.ti_timeredit {background-position:-75px 0px;}
.ti_timerdelete {background-position:-100px 0px;}
.ti_timerat {background-position:-125px 0px;}
.d_timer{display:none;}

</style>

<!-- Icons from: http://findicons.com/pack/1987/eico -->
<div id="leftmenu_main">
\t<div id="leftmenu_top" class="handle" style="cursor:move">''')
        _v = VFFSL(SL,"channel",True) # u'$channel' on line 32, col 60
        if _v is not None: write(_filter(_v, rawExpr=u'$channel')) # from line 32, col 60.
        write(u'''
\t\t<div id="leftmenu_expander_main" class="leftmenu_icon leftmenu_icon_collapse" onclick="$(\'#eventdescription\').hide(200)"></div>
\t</div>
\t<div id="leftmenu_container_main" style="padding:6px">
\t\t<div style="float:left; width:80px;">
\t\t\t<div id="station" style="background-color: #1c478e; padding:2px; width:75px; text-align:center; overflow:hidden">''')
        _v = VFFSL(SL,"event",True)['channel'] # u"$event['channel']" on line 37, col 117
        if _v is not None: write(_filter(_v, rawExpr=u"$event['channel']")) # from line 37, col 117.
        write(u'''</div>
\t\t\t<div style="background-color: #1c478e; color:#fff; width:79px; font-size:23px; margin-top: 5px; text-align:center">
\t\t\t\t''')
        _v = VFFSL(SL,"event.begin_str",True) # u'$event.begin_str' on line 39, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'$event.begin_str')) # from line 39, col 5.
        write(u'''<br/>
\t\t\t\t<span style="font-size:12px; color:#A9D1FA">''')
        _v = VFFSL(SL,"int",False)(VFFSL(SL,"event.duration",True)/60) # u'$int($event.duration/60)' on line 40, col 49
        if _v is not None: write(_filter(_v, rawExpr=u'$int($event.duration/60)')) # from line 40, col 49.
        write(u''' min</span>
\t\t\t</div>

\t\t\t<div style="background-color: #1c478e; color:#fff; width:79px;margin:5px 0">
\t\t\t\t<div style="font-size:23px; text-align:center">''')
        _v = VFFSL(SL,"tstrings",True)[("day_" + (VFN(VFFSL(SL,"time",True),"strftime",False)("%w", VFFSL(SL,"etime",True))))] # u'$tstrings[("day_" + ($time.strftime("%w", $etime)))]' on line 44, col 52
        if _v is not None: write(_filter(_v, rawExpr=u'$tstrings[("day_" + ($time.strftime("%w", $etime)))]')) # from line 44, col 52.
        write(u'''</div>
\t\t\t\t<div style="color:#A9D1FA; text-align:center">''')
        _v = VFN(VFFSL(SL,"time",True),"strftime",False)("%d", VFFSL(SL,"etime",True)) # u'$time.strftime("%d", $etime)' on line 45, col 51
        if _v is not None: write(_filter(_v, rawExpr=u'$time.strftime("%d", $etime)')) # from line 45, col 51.
        write(u''' ''')
        _v = VFFSL(SL,"tstrings",True)[("month_" + (VFN(VFFSL(SL,"time",True),"strftime",False)("%m", VFFSL(SL,"etime",True))))] # u'$tstrings[("month_" + ($time.strftime("%m", $etime)))]' on line 45, col 80
        if _v is not None: write(_filter(_v, rawExpr=u'$tstrings[("month_" + ($time.strftime("%m", $etime)))]')) # from line 45, col 80.
        write(u'''</div>
\t\t\t</div>

\t\t\t<div style="text-align:center">
\t\t\t\t
''')
        if VFFSL(SL,"transcoding",True): # generated from line 50, col 5
            write(u'''<a href="#" onclick="jumper8001(\'''')
            _v = VFFSL(SL,"sref",True) # u'$sref' on line 51, col 34
            if _v is not None: write(_filter(_v, rawExpr=u'$sref')) # from line 51, col 34.
            write(u"""', '""")
            _v = VFFSL(SL,"channel",True) # u'$channel' on line 51, col 43
            if _v is not None: write(_filter(_v, rawExpr=u'$channel')) # from line 51, col 43.
            write(u'''\');" title="''')
            _v = VFFSL(SL,"tstrings",True)['stream'] # u"$tstrings['stream']" on line 51, col 63
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['stream']")) # from line 51, col 63.
            write(u''': ''')
            _v = VFFSL(SL,"channel",True) # u'$channel' on line 51, col 84
            if _v is not None: write(_filter(_v, rawExpr=u'$channel')) # from line 51, col 84.
            write(u'''"><img src="../images/ico_stream.png" style="width:24px; height:22px; margin:0px 2px 0px 0px" border="0"></a>
<a href="#" onclick="jumper8002(\'''')
            _v = VFFSL(SL,"sref",True) # u'$sref' on line 52, col 34
            if _v is not None: write(_filter(_v, rawExpr=u'$sref')) # from line 52, col 34.
            write(u"""', '""")
            _v = VFFSL(SL,"channel",True) # u'$channel' on line 52, col 43
            if _v is not None: write(_filter(_v, rawExpr=u'$channel')) # from line 52, col 43.
            write(u'''\');" title="''')
            _v = VFFSL(SL,"tstrings",True)['stream'] # u"$tstrings['stream']" on line 52, col 63
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['stream']")) # from line 52, col 63.
            write(u''' (''')
            _v = VFFSL(SL,"tstrings",True)['transcoded'] # u"$tstrings['transcoded']" on line 52, col 84
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['transcoded']")) # from line 52, col 84.
            write(u'''): ''')
            _v = VFFSL(SL,"channel",True) # u'$channel' on line 52, col 110
            if _v is not None: write(_filter(_v, rawExpr=u'$channel')) # from line 52, col 110.
            write(u'''"><img src="../images/ico_stream02.png" style="width:24px; height:22px; margin:5px 2px 0px 0px" border="0"></a>
''')
        else: # generated from line 53, col 1
            write(u'''<a target="_blank" href=\'../web/stream.m3u?ref=''')
            _v = VFFSL(SL,"sref",True) # u'$sref' on line 54, col 48
            if _v is not None: write(_filter(_v, rawExpr=u'$sref')) # from line 54, col 48.
            write(u'''&name=''')
            _v = VFFSL(SL,"channel",True) # u'$channel' on line 54, col 59
            if _v is not None: write(_filter(_v, rawExpr=u'$channel')) # from line 54, col 59.
            write(u'''\' title="''')
            _v = VFFSL(SL,"tstrings",True)['stream'] # u"$tstrings['stream']" on line 54, col 76
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['stream']")) # from line 54, col 76.
            write(u''' ''')
            _v = VFFSL(SL,"channel",True) # u'$channel' on line 54, col 96
            if _v is not None: write(_filter(_v, rawExpr=u'$channel')) # from line 54, col 96.
            write(u'''"><img src="../images/ico_stream.png" style="width:24px; height:22px; margin:5px 2px 0px 0px" border="0"></a>
''')
        write(u'''\t\t\t\t<br>
\t\t\t
\t\t\t\t\t<a href="#" onclick="addTimerEvent(\'''')
        _v = VFFSL(SL,"sref",True) # u'$sref' on line 58, col 42
        if _v is not None: write(_filter(_v, rawExpr=u'$sref')) # from line 58, col 42.
        write(u"""',""")
        _v = VFFSL(SL,"event.id",True) # u'$event.id' on line 58, col 49
        if _v is not None: write(_filter(_v, rawExpr=u'$event.id')) # from line 58, col 49.
        write(u''');return false;" title="''')
        _v = VFFSL(SL,"tstrings",True)['add_timer'] # u"$tstrings['add_timer']" on line 58, col 82
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['add_timer']")) # from line 58, col 82.
        write(u'''"><div class="ti_icon ti_timer"></div></a>
\t\t\t\t\t<a href="#" onclick="addTimerEventPlay(\'''')
        _v = VFFSL(SL,"sref",True) # u'$sref' on line 59, col 46
        if _v is not None: write(_filter(_v, rawExpr=u'$sref')) # from line 59, col 46.
        write(u"""',""")
        _v = VFFSL(SL,"event.id",True) # u'$event.id' on line 59, col 53
        if _v is not None: write(_filter(_v, rawExpr=u'$event.id')) # from line 59, col 53.
        write(u''');return false;" title="''')
        _v = VFFSL(SL,"tstrings",True)['add_zaptimer'] # u"$tstrings['add_zaptimer']" on line 59, col 86
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['add_zaptimer']")) # from line 59, col 86.
        write(u'''"><div class="ti_icon ti_timerplay"></div></a>
\t\t\t\t\t<br>
\t\t\t\t\t<a href="#" onclick="addEditTimerEvent(\'''')
        _v = VFFSL(SL,"sref",True) # u'$sref' on line 61, col 46
        if _v is not None: write(_filter(_v, rawExpr=u'$sref')) # from line 61, col 46.
        write(u"""',""")
        _v = VFFSL(SL,"event.id",True) # u'$event.id' on line 61, col 53
        if _v is not None: write(_filter(_v, rawExpr=u'$event.id')) # from line 61, col 53.
        write(u''');return false;" title="''')
        _v = VFFSL(SL,"tstrings",True)['edit_timer'] # u"$tstrings['edit_timer']" on line 61, col 86
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['edit_timer']")) # from line 61, col 86.
        write(u'''"><div class="ti_icon ti_timeredit"></div></a>
''')
        if VFFSL(SL,"at",True): # generated from line 62, col 6
            write(u'''\t\t\t\t\t<a class="at_timer" href="#" onclick="addAutoTimerEvent(\'''')
            _v = VFFSL(SL,"sref",True) # u'$sref' on line 63, col 63
            if _v is not None: write(_filter(_v, rawExpr=u'$sref')) # from line 63, col 63.
            write(u"""','""")
            _v = VFFSL(SL,"channel",True) # u'$channel' on line 63, col 71
            if _v is not None: write(_filter(_v, rawExpr=u'$channel')) # from line 63, col 71.
            write(u"""','""")
            _v = VFFSL(SL,"title",True) # u'$title' on line 63, col 82
            if _v is not None: write(_filter(_v, rawExpr=u'$title')) # from line 63, col 82.
            write(u"""','""")
            _v = VFFSL(SL,"event.begin_str",True) # u'$event.begin_str' on line 63, col 91
            if _v is not None: write(_filter(_v, rawExpr=u'$event.begin_str')) # from line 63, col 91.
            write(u"""','""")
            _v = VFFSL(SL,"event.end",True) # u'$event.end' on line 63, col 110
            if _v is not None: write(_filter(_v, rawExpr=u'$event.end')) # from line 63, col 110.
            write(u'''\');return false;" title="''')
            _v = VFFSL(SL,"tstrings",True)['add_autotimer'] # u"$tstrings['add_autotimer']" on line 63, col 145
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['add_autotimer']")) # from line 63, col 145.
            write(u'''"><div class="ti_icon ti_timerat"></div></a>
''')
        write(u'''\t\t\t\t\t<a class="d_timer" href="#" onclick="delTimerEvent(this);return false;" title="''')
        _v = VFFSL(SL,"tstrings",True)['delete_timer'] # u"$tstrings['delete_timer']" on line 65, col 85
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['delete_timer']")) # from line 65, col 85.
        write(u'''"><div class="ti_icon ti_timerdelete"></div></a>
\t\t\t\t\t<br>
''')
        if VFFSL(SL,"kinopoisk",True): # generated from line 67, col 6
            write(u'''\t\t\t\t\t<a target="_blank" href="http://www.kinopoisk.ru/index.php?first=no&kp_query=''')
            _v = VFFSL(SL,"quote",False)(VFFSL(SL,"event.title",True)) # u'$quote($event.title)' on line 68, col 83
            if _v is not None: write(_filter(_v, rawExpr=u'$quote($event.title)')) # from line 68, col 83.
            write(u'''"><img src="../images/kinopoisk.png" style="width:24px; height:24px; margin:0px 3px 0px 0px" title="''')
            _v = VFFSL(SL,"tstrings",True)['search_kinopoisk'] # u"$tstrings['search_kinopoisk']" on line 68, col 203
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['search_kinopoisk']")) # from line 68, col 203.
            write(u'''" border="0"></a>
''')
        else: # generated from line 69, col 6
            write(u'''\t\t\t\t\t<a target="_blank" href="http://www.imdb.com/find?s=all&amp;q=''')
            _v = VFFSL(SL,"quote",False)(VFFSL(SL,"event.title",True)) # u'$quote($event.title)' on line 70, col 68
            if _v is not None: write(_filter(_v, rawExpr=u'$quote($event.title)')) # from line 70, col 68.
            write(u'''"><img src="../images/imdb.png" style="width:24px; height:24px; margin:0px 3px 0px 0px" title="''')
            _v = VFFSL(SL,"tstrings",True)['search_imdb'] # u"$tstrings['search_imdb']" on line 70, col 183
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['search_imdb']")) # from line 70, col 183.
            write(u'''" border="0"></a>
''')
        write(u'''\t\t\t\t<img src="../images/ico_zap.png" style="width:25px; height:25px; margin:5px 5px 0px 0px" alt="Zap" title="''')
        _v = VFFSL(SL,"tstrings",True)['zap'] # u"$tstrings['zap']" on line 72, col 111
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['zap']")) # from line 72, col 111.
        write(u'''" style="cursor:pointer" onclick="zapChannel(\'''')
        _v = VFFSL(SL,"str",False)(VFFSL(SL,"event",True)['sref']) # u"$str($event['sref'])" on line 72, col 173
        if _v is not None: write(_filter(_v, rawExpr=u"$str($event['sref'])")) # from line 72, col 173.
        write(u"""', '""")
        _v = VFFSL(SL,"channel",True) # u'$channel' on line 72, col 197
        if _v is not None: write(_filter(_v, rawExpr=u'$channel')) # from line 72, col 197.
        write(u'''\')" />
\t\t\t
\t\t\t</div>
\t\t</div>
\t\t<div style="float:left; width:250px; margin-left: 5px">
\t\t\t<div style="font-size: 13px; font-weight: bold">''')
        _v = VFFSL(SL,"event.title",True) # u'$event.title' on line 77, col 52
        if _v is not None: write(_filter(_v, rawExpr=u'$event.title')) # from line 77, col 52.
        write(u'''</div>
''')
        if VFFSL(SL,"event.title",True) != VFFSL(SL,"event.shortdesc",True): # generated from line 78, col 1
            write(u'''\t\t\t<div style="font-size: 12px; font-weight: bold">''')
            _v = VFFSL(SL,"event.shortdesc",True) # u'$event.shortdesc' on line 79, col 52
            if _v is not None: write(_filter(_v, rawExpr=u'$event.shortdesc')) # from line 79, col 52.
            write(u'''</div>
''')
        write(u'''\t\t\t<div style="max-height:400px; overflow:auto"><p>''')
        _v = VFN(VFFSL(SL,"event.longdesc",True),"replace",False)("\n","<br/>") # u'$(event.longdesc.replace("\\n","<br/>"))' on line 81, col 52
        if _v is not None: write(_filter(_v, rawExpr=u'$(event.longdesc.replace("\\n","<br/>"))')) # from line 81, col 52.
        write(u'''</p></div>
\t\t</div>
\t\t<div style="clear:left"></div>
\t</div>
</div>
<script>
var theevent = ''')
        _v = VFFSL(SL,"dumps",False)(VFFSL(SL,"event",True)) # u'$dumps($event)' on line 87, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'$dumps($event)')) # from line 87, col 16.
        write(u''';
if (picons[theevent[\'channel\']])
\t$(\'#station\').html(\'<img src="\'+picons[theevent[\'channel\']]+\'" width="75" />\');
</script>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_event= 'respond'

## END CLASS DEFINITION

if not hasattr(event, '_initCheetahAttributes'):
    templateAPIClass = getattr(event, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(event)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=event()).run()


