#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Plugins.Extensions.OpenWebif.local import tstrings

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1447321436.604968
__CHEETAH_genTimestamp__ = 'Thu Nov 12 18:43:56 2015'
__CHEETAH_src__ = '/home/knuth/openpli-oe-core/build/tmp/work/fusionhd-oe-linux/enigma2-plugin-extensions-openwebif/1+gitAUTOINC+5837c87afc-r0/git/plugin/controllers/views/ajax/boxinfo.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Nov 12 18:43:41 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class boxinfo(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(boxinfo, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''<!-- box_info -->
<div id="content_main">
\t<div id="info">
\t\t<h3>''')
        _v = VFFSL(SL,"tstrings",True)['box_info'] # u"$tstrings['box_info']" on line 5, col 7
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['box_info']")) # from line 5, col 7.
        write(u'''</h3>
\t\t<hr />
\t\t<img src="images/boxes/''')
        _v = VFFSL(SL,"boximage",True) # u'${boximage}' on line 7, col 26
        if _v is not None: write(_filter(_v, rawExpr=u'${boximage}')) # from line 7, col 26.
        write(u'''" id="box_image" alt="box_info">
\t\t<hr />
\t\t<br/>
\t\t<table width="100%">
\t\t\t<tr>
\t\t\t\t<td width="100%">
\t\t\t\t\t<table cellspacing="0" class="infomain" >
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<th colspan="2" class="infoHeader">''')
        _v = VFFSL(SL,"tstrings",True)['box'] # u"$tstrings['box']" on line 15, col 43
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['box']")) # from line 15, col 43.
        write(u'''</th>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
        _v = VFFSL(SL,"tstrings",True)['brand'] # u"$tstrings['brand']" on line 18, col 29
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['brand']")) # from line 18, col 29.
        write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"brand",True) # u'$brand' on line 19, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$brand')) # from line 19, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
        _v = VFFSL(SL,"tstrings",True)['model'] # u"$tstrings['model']" on line 22, col 29
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['model']")) # from line 22, col 29.
        write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"model",True) # u'$model' on line 23, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$model')) # from line 23, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
        _v = VFFSL(SL,"tstrings",True)['chipset'] # u"$tstrings['chipset']" on line 26, col 29
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['chipset']")) # from line 26, col 29.
        write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"chipset",True) # u'$chipset' on line 27, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$chipset')) # from line 27, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
        _v = VFFSL(SL,"tstrings",True)['fp_version'] # u"$tstrings['fp_version']" on line 30, col 29
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['fp_version']")) # from line 30, col 29.
        write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"str",False)(VFFSL(SL,"fp_version",True)) # u'$str($fp_version)' on line 31, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$str($fp_version)')) # from line 31, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
        _v = VFFSL(SL,"tstrings",True)['total_memory'] # u"$tstrings['total_memory']" on line 34, col 29
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['total_memory']")) # from line 34, col 29.
        write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"mem1",True) # u'$mem1' on line 35, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$mem1')) # from line 35, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
        _v = VFFSL(SL,"tstrings",True)['free_memory'] # u"$tstrings['free_memory']" on line 38, col 29
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['free_memory']")) # from line 38, col 29.
        write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"mem2",True) # u'$mem2' on line 39, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$mem2')) # from line 39, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
        _v = VFFSL(SL,"tstrings",True)['box_uptime'] # u"$tstrings['box_uptime']" on line 42, col 29
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['box_uptime']")) # from line 42, col 29.
        write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"uptime",True) # u'$uptime' on line 43, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$uptime')) # from line 43, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t</table>
\t\t\t\t</td>
\t\t\t</tr>
\t\t\t<tr>
\t\t\t\t<td width="100%">
\t\t\t\t\t<table cellspacing="0" class="infomain" >
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<th colspan="2" class="infoHeader">''')
        _v = VFFSL(SL,"tstrings",True)['software'] # u"$tstrings['software']" on line 52, col 43
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['software']")) # from line 52, col 43.
        write(u'''</th>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
        _v = VFFSL(SL,"tstrings",True)['oe_version'] # u"$tstrings['oe_version']" on line 55, col 29
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['oe_version']")) # from line 55, col 29.
        write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"oever",True) # u'$oever' on line 56, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$oever')) # from line 56, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
        _v = VFFSL(SL,"tstrings",True)['distro_version'] # u"$tstrings['distro_version']" on line 59, col 29
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['distro_version']")) # from line 59, col 29.
        write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"imagedistro",True) # u'$imagedistro' on line 60, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$imagedistro')) # from line 60, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
        _v = VFFSL(SL,"tstrings",True)['firmware_version'] # u"$tstrings['firmware_version']" on line 63, col 29
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['firmware_version']")) # from line 63, col 29.
        write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"imagever",True) # u'$imagever' on line 64, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$imagever')) # from line 64, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
        _v = VFFSL(SL,"tstrings",True)['driver_date'] # u"$tstrings['driver_date']" on line 67, col 29
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['driver_date']")) # from line 67, col 29.
        write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"driverdate",True) # u'$driverdate' on line 68, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$driverdate')) # from line 68, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
        _v = VFFSL(SL,"tstrings",True)['kernel_version'] # u"$tstrings['kernel_version']" on line 71, col 29
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['kernel_version']")) # from line 71, col 29.
        write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"kernelver",True) # u'$kernelver' on line 72, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$kernelver')) # from line 72, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
        _v = VFFSL(SL,"tstrings",True)['gui_version'] # u"$tstrings['gui_version']" on line 75, col 29
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['gui_version']")) # from line 75, col 29.
        write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
        _v = VFFSL(SL,"enigmaver",True) # u'$enigmaver' on line 76, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$enigmaver')) # from line 76, col 30.
        write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t</table>
\t\t\t\t</td>
\t\t\t</tr>
\t\t\t<tr>
\t\t\t\t<td width="100%">
\t\t\t\t\t<table cellspacing="0" class="infomain" >
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<th colspan="2" class="infoHeader">''')
        _v = VFFSL(SL,"tstrings",True)['tuners'] # u"$tstrings['tuners']" on line 85, col 43
        if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['tuners']")) # from line 85, col 43.
        write(u'''</th>
\t\t\t\t\t\t</tr>
''')
        for tuner in VFFSL(SL,"tuners",True): # generated from line 87, col 7
            write(u'''\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
            _v = VFFSL(SL,"tuner.name",True) # u'$tuner.name' on line 89, col 29
            if _v is not None: write(_filter(_v, rawExpr=u'$tuner.name')) # from line 89, col 29.
            write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"tuner.type",True) # u'$tuner.type' on line 90, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$tuner.type')) # from line 90, col 30.
            write(u'''</td>
\t\t\t\t\t\t</tr>
''')
        write(u'''\t\t\t\t\t</table>
\t\t\t\t</td>
\t\t\t</tr>
''')
        for hd in VFFSL(SL,"hdd",True): # generated from line 96, col 4
            write(u'''\t\t\t<tr>
\t\t\t\t<td width="100%">
\t\t\t\t\t<table cellspacing="0" class="infomain" >
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<th colspan="2" class="infoHeader">''')
            _v = VFFSL(SL,"tstrings",True)['hdd_model'] # u"$tstrings['hdd_model']" on line 101, col 43
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['hdd_model']")) # from line 101, col 43.
            write(u''': ''')
            _v = VFFSL(SL,"hd.model",True) # u'$hd.model' on line 101, col 67
            if _v is not None: write(_filter(_v, rawExpr=u'$hd.model')) # from line 101, col 67.
            write(u'''</th>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
            _v = VFFSL(SL,"tstrings",True)['capacity'] # u"$tstrings['capacity']" on line 104, col 29
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['capacity']")) # from line 104, col 29.
            write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"hd.capacity",True) # u'$hd.capacity' on line 105, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$hd.capacity')) # from line 105, col 30.
            write(u''' ("''')
            _v = VFFSL(SL,"hd.labelled_capacity",True) # u'$hd.labelled_capacity' on line 105, col 45
            if _v is not None: write(_filter(_v, rawExpr=u'$hd.labelled_capacity')) # from line 105, col 45.
            write(u'''")</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
            _v = VFFSL(SL,"tstrings",True)['free'] # u"$tstrings['free']" on line 108, col 29
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['free']")) # from line 108, col 29.
            write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"hd.free",True) # u'$hd.free' on line 109, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$hd.free')) # from line 109, col 30.
            write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t</table>
\t\t\t\t</td>
\t\t\t</tr>
''')
        for iface in VFFSL(SL,"ifaces",True): # generated from line 115, col 4
            write(u'''\t\t\t<tr>
\t\t\t\t<td width="100%">
\t\t\t\t\t<table cellspacing="0" class="infomain" >
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<th colspan="2" class="infoHeader">''')
            _v = VFFSL(SL,"tstrings",True)['network_interface'] # u"$tstrings['network_interface']" on line 120, col 43
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['network_interface']")) # from line 120, col 43.
            write(u''': ''')
            _v = VFFSL(SL,"iface.name",True) # u'$iface.name' on line 120, col 75
            if _v is not None: write(_filter(_v, rawExpr=u'$iface.name')) # from line 120, col 75.
            write(u'''</th>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
            _v = VFFSL(SL,"tstrings",True)['dhcp'] # u"$tstrings['dhcp']" on line 123, col 29
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['dhcp']")) # from line 123, col 29.
            write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"iface.dhcp",True) # u'$iface.dhcp' on line 124, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$iface.dhcp')) # from line 124, col 30.
            write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
            _v = VFFSL(SL,"tstrings",True)['ip_address'] # u"$tstrings['ip_address']" on line 127, col 29
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['ip_address']")) # from line 127, col 29.
            write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"iface.ip",True) # u'$iface.ip' on line 128, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$iface.ip')) # from line 128, col 30.
            write(u'''/''')
            _v = VFFSL(SL,"iface.v4prefix",True) # u'$iface.v4prefix' on line 128, col 40
            if _v is not None: write(_filter(_v, rawExpr=u'$iface.v4prefix')) # from line 128, col 40.
            write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
            _v = VFFSL(SL,"tstrings",True)['subnet_mask'] # u"$tstrings['subnet_mask']" on line 131, col 29
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['subnet_mask']")) # from line 131, col 29.
            write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"iface.mask",True) # u'$iface.mask' on line 132, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$iface.mask')) # from line 132, col 30.
            write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
            _v = VFFSL(SL,"tstrings",True)['gateway'] # u"$tstrings['gateway']" on line 135, col 29
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['gateway']")) # from line 135, col 29.
            write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"iface.gw",True) # u'$iface.gw' on line 136, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$iface.gw')) # from line 136, col 30.
            write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
            _v = VFFSL(SL,"tstrings",True)['mac_address'] # u"$tstrings['mac_address']" on line 139, col 29
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['mac_address']")) # from line 139, col 29.
            write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"iface.mac",True) # u'$iface.mac' on line 140, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$iface.mac')) # from line 140, col 30.
            write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t\t<tr>
\t\t\t\t\t\t\t<td class="infoleft">''')
            _v = VFFSL(SL,"tstrings",True)['ipv6_address'] # u"$tstrings['ipv6_address']" on line 143, col 29
            if _v is not None: write(_filter(_v, rawExpr=u"$tstrings['ipv6_address']")) # from line 143, col 29.
            write(u''':</td>
\t\t\t\t\t\t\t<td class="inforight">''')
            _v = VFFSL(SL,"iface.ipv6",True) # u'$iface.ipv6' on line 144, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$iface.ipv6')) # from line 144, col 30.
            write(u'''</td>
\t\t\t\t\t\t</tr>
\t\t\t\t\t</table>
\t\t\t\t</td>
\t\t\t</tr>
''')
        write(u'''\t\t</table>
\t</div>
</div>\t
<!-- /box_info -->
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_boxinfo= 'respond'

## END CLASS DEFINITION

if not hasattr(boxinfo, '_initCheetahAttributes'):
    templateAPIClass = getattr(boxinfo, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(boxinfo)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=boxinfo()).run()


